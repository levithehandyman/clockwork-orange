{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["FontAwesome","require","App","props","state","session","break","timer","timerLabel","timerState","timerID","sessionAdjust","bind","breakAdjust","startStop","countDown","resetTimer","secondsIntoClock","value","newSession","this","parseInt","setState","newBreak","setInterval","clearInterval","audioBeep","play","pause","currentTime","minutes","Math","floor","seconds","id","className","onClick","src","ref","audio","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.58a41c8e.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport './App.css';\nimport '@fortawesome/fontawesome-free/css/all.min.css';\n\nvar FontAwesome = require('react-fontawesome');\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      session: 25,\n      break: 5,\n      timer: 1500,\n      timerLabel: 'Session',\n      timerState: 'stopped'\n    }\n    this.timerID = null;\n    this.sessionAdjust = this.sessionAdjust.bind(this);\n    this.breakAdjust = this.breakAdjust.bind(this);\n    this.startStop = this.startStop.bind(this);\n    this.countDown = this.countDown.bind(this);\n    this.resetTimer = this.resetTimer.bind(this);\n    this.secondsIntoClock = this.secondsIntoClock.bind(this);\n  }\n\n  sessionAdjust(value) {\n    let newSession = this.state.session + parseInt(value);\n    if (newSession > 0 && newSession < 61) {\n      this.setState({\n        session: newSession,\n        timer: newSession * 60\n      });\n    }\n  }\n  \n  breakAdjust(value) {\n    let newBreak = this.state.break + parseInt(value);\n    if (newBreak > 0 && newBreak < 61) {\n      this.setState({\n        break: newBreak\n      });\n    }\n  }\n  \n  startStop() {\n    if (this.state.timerState === 'stopped') {\n      this.timerID = setInterval(this.countDown, 1000);\n      this.setState({\n        timerState: 'playing'\n      });\n    } else {\n      clearInterval(this.timerID);\n      this.setState({\n        timerState: 'stopped'\n      });\n    }\n  }\n  \n  countDown() {\n    let timer = this.state.timer - 1;\n    this.setState({\n      timer: timer\n    });\n    if (timer === 0) {\n      this.audioBeep.play()\n    };\n    if (timer < 0) {\n      if (this.state.timerLabel === 'Session') {\n        this.setState({\n          timerLabel: 'Break',\n          timer: this.state.break * 60\n        });\n      } else {\n        this.setState({\n          timerLabel: 'Session',\n          timer: this.state.session * 60\n        });\n      }\n    }\n  }\n  \n  resetTimer() {\n    this.setState({\n      session: 25,\n      break: 5,\n      timer: 1500,\n      timerLabel: 'Session',\n      timerState: 'stopped'\n    });\n    clearInterval(this.timerID);\n    this.timerID = null;\n    this.audioBeep.pause();\n    this.audioBeep.currentTime = 0;\n  }\n  \n  secondsIntoClock(){\n    let minutes = Math.floor(this.state.timer / 60);\n    let seconds = this.state.timer - minutes * 60;\n    seconds = seconds < 10 ? '0' + seconds : seconds;\n    minutes = minutes < 10 ? '0' + minutes : minutes;\n    return minutes + ':' + seconds;\n  }\n\n  render() {\n    return (\n      <div>\n      {/*Header*/}\n        \n          <div id='header'>\n            <h1 \n            id='tomato-clock-chinese'\n            className='text'>番茄时钟</h1>\n          </div>\n\n      {/*Break Timer*/}\n        <div \n          id='break-label'\n          className='clock-container'>break length\n          <button \n            id='break-increment' \n            className='increment'\n            onClick={() => this.breakAdjust('1')}>\n             <FontAwesome className=\"far fa-caret-square-up\"/>\n          </button>\n            <span id='break-length' className='timer-display'>{this.state.break}</span>\n          <button \n            id='break-decrement' \n            className='decrement'\n            onClick={() => this.breakAdjust('-1')}>\n            <FontAwesome className=\"far fa-caret-square-down\" />\n          </button>\n        </div>\n\n      {/*Session Timer*/}\n        <div \n            id='session-label' \n            className='clock-container'>\n            session length\n          <button \n            id='session-increment' \n            className='increment'\n            onClick={() => this.sessionAdjust('1')}>\n          <FontAwesome className=\"far fa-caret-square-up\"/>\n          </button>\n            <span id='session-length' className='timer-display'>{this.state.session}</span>\n          <button \n            id='session-decrement' \n            className='decrement'\n            onClick={() => this.sessionAdjust('-1')}>\n          <FontAwesome className=\"far fa-caret-square-down\" />\n          </button>\n        </div>\n\n      {/*Display */}\n        <div className='display'>\n          <h2 id='timer-label'>{this.state.timerLabel}</h2>\n          <br />\n          <span id='time-left'>{this.secondsIntoClock()}</span>\n          <br />\n          <button \n            id='start_stop' \n            className='action-button'\n            onClick={this.startStop}>\n            <FontAwesome className=\"fas fa-stopwatch\" />\n            <audio \n            id='beep' \n            src='https://res.cloudinary.com/dnv60ey6k/video/upload/v1615996344/samples/beep_aygyme.wav'\n            ref={(audio) => {this.audioBeep = audio}}\n            />\n          </button>\n          <button \n            id='reset'\n            className='action-button'\n            onClick={this.resetTimer}\n            >\n            <FontAwesome className=\"fas fa-sync-alt\" />\n          </button>\n        </div> \n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}